import React, { useState, useRef, useEffect } from 'react';
import { Upload, Download, RotateCcw, Crop, Sliders, Filter, FileImage } from 'lucide-react';

const ImageProcessor = () => {
  const [image, setImage] = useState(null);
  const [processedImage, setProcessedImage] = useState(null);
  const [filters, setFilters] = useState({
    brightness: 100,
    contrast: 100,
    saturation: 100,
    blur: 0,
    grayscale: 0,
    sepia: 0,
    hue: 0
  });
  const [cropMode, setCropMode] = useState(false);
  const [cropData, setCropData] = useState({ x: 0, y: 0, width: 0, height: 0 });
  const [resizeData, setResizeData] = useState({ width: 0, height: 0 });
  const [activeTab, setActiveTab] = useState('filters');
  const [isDragging, setIsDragging] = useState(false);
  
  const canvasRef = useRef(null);
  const imageRef = useRef(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    if (image) {
      applyFilters();
    }
  }, [filters, image]);

  const handleFileUpload = (file) => {
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const img = new Image();
        img.onload = () => {
          setImage(img);
          setResizeData({ width: img.width, height: img.height });
          setCropData({ x: 0, y: 0, width: img.width, height: img.height });
        };
        img.src = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const applyFilters = () => {
    if (!image || !canvasRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    canvas.width = image.width;
    canvas.height = image.height;

    // Apply CSS filters via canvas context
    ctx.filter = `
      brightness(${filters.brightness}%)
      contrast(${filters.contrast}%)
      saturate(${filters.saturation}%)
      blur(${filters.blur}px)
      grayscale(${filters.grayscale}%)
      sepia(${filters.sepia}%)
      hue-rotate(${filters.hue}deg)
    `;

    ctx.drawImage(image, 0, 0);
    
    // Convert canvas to image data URL
    const dataURL = canvas.toDataURL('image/png');
    const processedImg = new Image();
    processedImg.onload = () => setProcessedImage(processedImg);
    processedImg.src = dataURL;
  };

  const resetFilters = () => {
    setFilters({
      brightness: 100,
      contrast: 100,
      saturation: 100,
      blur: 0,
      grayscale: 0,
      sepia: 0,
      hue: 0
    });
  };

  const cropImage = () => {
    if (!processedImage || !canvasRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    canvas.width = cropData.width;
    canvas.height = cropData.height;

    ctx.drawImage(
      processedImage,
      cropData.x, cropData.y, cropData.width, cropData.height,
      0, 0, cropData.width, cropData.height
    );

    const dataURL = canvas.toDataURL('image/png');
    const croppedImg = new Image();
    croppedImg.onload = () => {
      setProcessedImage(croppedImg);
      setImage(croppedImg);
      setResizeData({ width: cropData.width, height: cropData.height });
    };
    croppedImg.src = dataURL;
    setCropMode(false);
  };

  const resizeImage = () => {
    if (!processedImage || !canvasRef.current || !resizeData.width || !resizeData.height) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    canvas.width = resizeData.width;
    canvas.height = resizeData.height;

    ctx.drawImage(processedImage, 0, 0, resizeData.width, resizeData.height);

    const dataURL = canvas.toDataURL('image/png');
    const resizedImg = new Image();
    resizedImg.onload = () => {
      setProcessedImage(resizedImg);
      setImage(resizedImg);
    };
    resizedImg.src = dataURL;
  };

  const downloadImage = () => {
    if (!canvasRef.current) return;
    
    const link = document.createElement('a');
    link.download = 'processed-image.png';
    link.href = canvasRef.current.toDataURL();
    link.click();
  };

  const FilterSlider = ({ label, value, onChange, min = 0, max = 200, step = 1 }) => (
    <div className="mb-4">
      <div className="flex justify-between items-center mb-2">
        <label className="text-sm font-medium text-gray-700">{label}</label>
        <span className="text-sm text-gray-500">{value}{label.includes('Blur') ? 'px' : '%'}</span>
      </div>
      <input
        type="range"
        min={min}
        max={max}
        step={step}
        value={value}
        onChange={(e) => onChange(parseInt(e.target.value))}
        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
      />
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-6">
            <h1 className="text-3xl font-bold text-white flex items-center gap-3">
              <FileImage className="w-8 h-8" />
              Advanced Image Processor
            </h1>
            <p className="text-blue-100 mt-2">Professional image editing tools at your fingertips</p>
          </div>

          <div className="flex flex-col lg:flex-row">
            {/* Left Panel - Controls */}
            <div className="lg:w-1/3 p-6 border-r border-gray-200">
              {/* File Upload */}
              <div className="mb-6">
                <div
                  className={`border-2 border-dashed rounded-xl p-8 text-center transition-all ${
                    isDragging
                      ? 'border-blue-400 bg-blue-50'
                      : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50'
                  }`}
                  onDrop={handleDrop}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                >
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600 mb-4">Drag & drop an image or</p>
                  <button
                    onClick={() => fileInputRef.current?.click()}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
                  >
                    Browse Files
                  </button>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*"
                    onChange={(e) => e.target.files[0] && handleFileUpload(e.target.files[0])}
                    className="hidden"
                  />
                </div>
              </div>

              {image && (
                <>
                  {/* Tab Navigation */}
                  <div className="flex mb-6 bg-gray-100 rounded-lg p-1">
                    <button
                      onClick={() => setActiveTab('filters')}
                      className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                        activeTab === 'filters'
                          ? 'bg-white text-blue-600 shadow-sm'
                          : 'text-gray-600 hover:text-gray-800'
                      }`}
                    >
                      <Filter className="w-4 h-4 inline mr-2" />
                      Filters
                    </button>
                    <button
                      onClick={() => setActiveTab('adjust')}
                      className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                        activeTab === 'adjust'
                          ? 'bg-white text-blue-600 shadow-sm'
                          : 'text-gray-600 hover:text-gray-800'
                      }`}
                    >
                      <Sliders className="w-4 h-4 inline mr-2" />
                      Adjust
                    </button>
                    <button
                      onClick={() => setActiveTab('transform')}
                      className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                        activeTab === 'transform'
                          ? 'bg-white text-blue-600 shadow-sm'
                          : 'text-gray-600 hover:text-gray-800'
                      }`}
                    >
                      <Crop className="w-4 h-4 inline mr-2" />
                      Transform
                    </button>
                  </div>

                  {/* Filter Controls */}
                  {activeTab === 'filters' && (
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">Image Filters</h3>
                      <FilterSlider
                        label="Grayscale"
                        value={filters.grayscale}
                        onChange={(value) => setFilters(prev => ({ ...prev, grayscale: value }))}
                        max={100}
                      />
                      <FilterSlider
                        label="Sepia"
                        value={filters.sepia}
                        onChange={(value) => setFilters(prev => ({ ...prev, sepia: value }))}
                        max={100}
                      />
                      <FilterSlider
                        label="Blur"
                        value={filters.blur}
                        onChange={(value) => setFilters(prev => ({ ...prev, blur: value }))}
                        max={10}
                      />
                      <FilterSlider
                        label="Hue Rotate"
                        value={filters.hue}
                        onChange={(value) => setFilters(prev => ({ ...prev, hue: value }))}
                        min={-180}
                        max={180}
                      />
                    </div>
                  )}

                  {/* Adjustment Controls */}
                  {activeTab === 'adjust' && (
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">Color Adjustments</h3>
                      <FilterSlider
                        label="Brightness"
                        value={filters.brightness}
                        onChange={(value) => setFilters(prev => ({ ...prev, brightness: value }))}
                        min={0}
                        max={200}
                      />
                      <FilterSlider
                        label="Contrast"
                        value={filters.contrast}
                        onChange={(value) => setFilters(prev => ({ ...prev, contrast: value }))}
                        min={0}
                        max={200}
                      />
                      <FilterSlider
                        label="Saturation"
                        value={filters.saturation}
                        onChange={(value) => setFilters(prev => ({ ...prev, saturation: value }))}
                        min={0}
                        max={200}
                      />
                    </div>
                  )}

                  {/* Transform Controls */}
                  {activeTab === 'transform' && (
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-800 mb-4">Transform Image</h3>
                      
                      {/* Resize */}
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h4 className="font-medium text-gray-700 mb-3">Resize</h4>
                        <div className="grid grid-cols-2 gap-3 mb-3">
                          <div>
                            <label className="block text-sm text-gray-600 mb-1">Width</label>
                            <input
                              type="number"
                              value={resizeData.width}
                              onChange={(e) => setResizeData(prev => ({ ...prev, width: parseInt(e.target.value) || 0 }))}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-gray-600 mb-1">Height</label>
                            <input
                              type="number"
                              value={resizeData.height}
                              onChange={(e) => setResizeData(prev => ({ ...prev, height: parseInt(e.target.value) || 0 }))}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                        </div>
                        <button
                          onClick={resizeImage}
                          className="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md font-medium transition-colors"
                        >
                          Apply Resize
                        </button>
                      </div>

                      {/* Crop */}
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h4 className="font-medium text-gray-700 mb-3">Crop</h4>
                        <div className="grid grid-cols-2 gap-3 mb-3">
                          <div>
                            <label className="block text-sm text-gray-600 mb-1">X</label>
                            <input
                              type="number"
                              value={cropData.x}
                              onChange={(e) => setCropData(prev => ({ ...prev, x: parseInt(e.target.value) || 0 }))}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-gray-600 mb-1">Y</label>
                            <input
                              type="number"
                              value={cropData.y}
                              onChange={(e) => setCropData(prev => ({ ...prev, y: parseInt(e.target.value) || 0 }))}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-gray-600 mb-1">Width</label>
                            <input
                              type="number"
                              value={cropData.width}
                              onChange={(e) => setCropData(prev => ({ ...prev, width: parseInt(e.target.value) || 0 }))}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                          <div>
                            <label className="block text-sm text-gray-600 mb-1">Height</label>
                            <input
                              type="number"
                              value={cropData.height}
                              onChange={(e) => setCropData(prev => ({ ...prev, height: parseInt(e.target.value) || 0 }))}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                        </div>
                        <button
                          onClick={cropImage}
                          className="w-full bg-orange-600 hover:bg-orange-700 text-white py-2 px-4 rounded-md font-medium transition-colors"
                        >
                          Apply Crop
                        </button>
                      </div>
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="mt-6 space-y-3">
                    <button
                      onClick={resetFilters}
                      className="w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-4 rounded-lg font-medium transition-colors flex items-center justify-center gap-2"
                    >
                      <RotateCcw className="w-4 h-4" />
                      Reset All Filters
                    </button>
                    <button
                      onClick={downloadImage}
                      className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition-colors flex items-center justify-center gap-2"
                    >
                      <Download className="w-4 h-4" />
                      Download Image
                    </button>
                  </div>
                </>
              )}
            </div>

            {/* Right Panel - Image Display */}
            <div className="lg:w-2/3 p-6">
              {!image ? (
                <div className="h-96 flex items-center justify-center bg-gray-50 rounded-xl">
                  <div className="text-center">
                    <FileImage className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                    <p className="text-gray-500 text-lg">Upload an image to get started</p>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold text-gray-800">Image Preview</h3>
                    <div className="text-sm text-gray-500">
                      {processedImage ? `${processedImage.width} × ${processedImage.height}` : ''}
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 rounded-xl p-4 flex justify-center items-center min-h-96">
                    {processedImage && (
                      <img
                        ref={imageRef}
                        src={processedImage.src}
                        alt="Processed"
                        className="max-w-full max-h-96 object-contain rounded-lg shadow-lg"
                      />
                    )}
                  </div>
                  
                  {/* Original vs Processed Comparison */}
                  {processedImage && (
                    <div className="grid grid-cols-2 gap-4 mt-6">
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Original</h4>
                        <img
                          src={image.src}
                          alt="Original"
                          className="w-full h-32 object-cover rounded-lg border border-gray-200"
                        />
                      </div>
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 mb-2">Processed</h4>
                        <img
                          src={processedImage.src}
                          alt="Processed"
                          className="w-full h-32 object-cover rounded-lg border border-gray-200"
                        />
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Hidden Canvas for Processing */}
      <canvas ref={canvasRef} className="hidden" />
    </div>
  );
};

export default ImageProcessor;
